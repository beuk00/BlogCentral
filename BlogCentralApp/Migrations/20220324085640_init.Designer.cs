// <auto-generated />
using System;
using BlogCentralApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogCentralApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220324085640_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogCentralLib.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content1",
                            Date = new DateTime(2022, 3, 23, 9, 56, 40, 400, DateTimeKind.Local).AddTicks(4125),
                            Likes = 0,
                            Title = "BlogPost1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content2",
                            Date = new DateTime(2022, 3, 22, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2872),
                            Likes = 0,
                            Title = "BlogPost2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content3",
                            Date = new DateTime(2022, 3, 21, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2936),
                            Likes = 0,
                            Title = "BlogPost3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content4",
                            Date = new DateTime(2022, 3, 20, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2943),
                            Likes = 0,
                            Title = "BlogPost4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content5",
                            Date = new DateTime(2022, 3, 19, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2948),
                            Likes = 0,
                            Title = "BlogPost5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content6",
                            Date = new DateTime(2022, 3, 18, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2952),
                            Likes = 0,
                            Title = "BlogPost6"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content7",
                            Date = new DateTime(2022, 3, 17, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2956),
                            Likes = 0,
                            Title = "BlogPost7"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content8",
                            Date = new DateTime(2022, 3, 16, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2961),
                            Likes = 0,
                            Title = "BlogPost8"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content9",
                            Date = new DateTime(2022, 3, 15, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2965),
                            Likes = 0,
                            Title = "BlogPost9"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content10",
                            Date = new DateTime(2022, 3, 14, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2970),
                            Likes = 0,
                            Title = "BlogPost10"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content11",
                            Date = new DateTime(2022, 3, 13, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2974),
                            Likes = 0,
                            Title = "BlogPost11"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content1",
                            Date = new DateTime(2022, 3, 12, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2978),
                            Likes = 0,
                            Title = "BlogPost12"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content2",
                            Date = new DateTime(2022, 3, 11, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2982),
                            Likes = 0,
                            Title = "BlogPost13"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content3",
                            Date = new DateTime(2022, 3, 10, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2987),
                            Likes = 0,
                            Title = "BlogPost14"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content4",
                            Date = new DateTime(2022, 3, 9, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2991),
                            Likes = 0,
                            Title = "BlogPost15"
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content5",
                            Date = new DateTime(2022, 3, 8, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(2996),
                            Likes = 0,
                            Title = "BlogPost16"
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content6",
                            Date = new DateTime(2022, 3, 7, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3000),
                            Likes = 0,
                            Title = "BlogPost17"
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content7",
                            Date = new DateTime(2022, 3, 6, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3004),
                            Likes = 0,
                            Title = "BlogPost18"
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content8",
                            Date = new DateTime(2022, 3, 5, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3008),
                            Likes = 0,
                            Title = "BlogPost19"
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content9",
                            Date = new DateTime(2022, 3, 4, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3012),
                            Likes = 0,
                            Title = "BlogPost20"
                        },
                        new
                        {
                            Id = 21,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content10",
                            Date = new DateTime(2022, 3, 3, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3016),
                            Likes = 0,
                            Title = "BlogPost21"
                        },
                        new
                        {
                            Id = 22,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            Content = "content11",
                            Date = new DateTime(2022, 3, 2, 9, 56, 40, 404, DateTimeKind.Local).AddTicks(3023),
                            Likes = 0,
                            Title = "BlogPost22"
                        });
                });

            modelBuilder.Entity("BlogCentralLib.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogpostId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogpostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            BlogpostId = 1,
                            Content = "Comment 01"
                        });
                });

            modelBuilder.Entity("BlogCentralLib.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlogPostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlogCentralLib.Entities.Author", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Author");

                    b.HasData(
                        new
                        {
                            Id = "09f8c9a1-2263-4eb5-8fd9-600ba680b94a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30260d9d-5828-4ff7-b48b-3d486f42e8a4",
                            Email = "ibrahim@intec.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IBRAHIM@INTEC.BE",
                            NormalizedUserName = "IBRAHIM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJePz5y2d5NFib78ZeFuWLJ85nq1WgMGsj4PmCTPVUUVe/l1PRTEHTFIysA/NxSGNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bff7b38-dd70-49c8-a198-463c98a73cb4",
                            TwoFactorEnabled = false,
                            UserName = "Ibrahim",
                            FirstName = "Ibrahim",
                            ImageUrl = "\\images\\Default.png",
                            LastName = "Awad"
                        },
                        new
                        {
                            Id = "ce8a91ab-41ca-4e08-8cae-40d4cda1a938",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0505fcf3-2ae0-4778-baf6-3c897ebff3e7",
                            Email = "quinten@intec.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QUINTEN@INTEC.BE",
                            NormalizedUserName = "QUINTEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJePz5y2d5NFib78ZeFuWLJ85nq1WgMGsj4PmCTPVUUVe/l1PRTEHTFIysA/NxSGNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f98c7bf3-735f-4a73-addd-818460be8d1a",
                            TwoFactorEnabled = false,
                            UserName = "Quinten",
                            FirstName = "Quinten",
                            ImageUrl = "\\images\\Default.png",
                            LastName = "De Clerck"
                        });
                });

            modelBuilder.Entity("BlogCentralLib.Entities.BlogPost", b =>
                {
                    b.HasOne("BlogCentralLib.Entities.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogCentralLib.Entities.Comment", b =>
                {
                    b.HasOne("BlogCentralLib.Entities.BlogPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogpostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogCentralLib.Entities.Like", b =>
                {
                    b.HasOne("BlogCentralLib.Entities.Author", "Author")
                        .WithMany("Likes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogCentralLib.Entities.BlogPost", "BlogPost")
                        .WithMany("likes")
                        .HasForeignKey("BlogPostId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
